var _user$project$Main$styledSaveButton = A2(
	_styled_components$elm_styled$Styled$styled,
	_elm_lang$html$Html$button,
	{
		ctor: '::',
		_0: _styled_components$elm_styled$Styled$backgroundColor(_styled_components$elm_styled$Styled_Colors$white),
		_1: {
			ctor: '::',
			_0: A3(
				_styled_components$elm_styled$Styled$border,
				_styled_components$elm_styled$Styled$px(2),
				_styled_components$elm_styled$Styled$solid,
				_styled_components$elm_styled$Styled_Colors$lightBlue),
			_1: {
				ctor: '::',
				_0: _styled_components$elm_styled$Styled$padding(
					_styled_components$elm_styled$Styled$px(8)),
				_1: {
					ctor: '::',
					_0: _styled_components$elm_styled$Styled$borderRadius(
						_styled_components$elm_styled$Styled$px(20)),
					_1: {
						ctor: '::',
						_0: _styled_components$elm_styled$Styled$float(_styled_components$elm_styled$Styled$right_),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	});
var _user$project$Main$styledActiveControlButtons = A2(
	_styled_components$elm_styled$Styled$styled,
	_elm_lang$html$Html$button,
	{
		ctor: '::',
		_0: _styled_components$elm_styled$Styled$backgroundColor(_styled_components$elm_styled$Styled_Colors$white),
		_1: {
			ctor: '::',
			_0: A3(
				_styled_components$elm_styled$Styled$border,
				_styled_components$elm_styled$Styled$px(1),
				_styled_components$elm_styled$Styled$solid,
				_styled_components$elm_styled$Styled_Colors$pink),
			_1: {
				ctor: '::',
				_0: _styled_components$elm_styled$Styled$margin(
					_styled_components$elm_styled$Styled$px(2)),
				_1: {
					ctor: '::',
					_0: _styled_components$elm_styled$Styled$padding(
						_styled_components$elm_styled$Styled$px(5)),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Main$styledControlButtons = A2(
	_styled_components$elm_styled$Styled$styled,
	_elm_lang$html$Html$button,
	{
		ctor: '::',
		_0: _styled_components$elm_styled$Styled$backgroundColor(_styled_components$elm_styled$Styled_Colors$white),
		_1: {
			ctor: '::',
			_0: A3(
				_styled_components$elm_styled$Styled$border,
				_styled_components$elm_styled$Styled$px(1),
				_styled_components$elm_styled$Styled$solid,
				_styled_components$elm_styled$Styled_Colors$lightGray),
			_1: {
				ctor: '::',
				_0: _styled_components$elm_styled$Styled$margin(
					_styled_components$elm_styled$Styled$px(2)),
				_1: {
					ctor: '::',
					_0: _styled_components$elm_styled$Styled$padding(
						_styled_components$elm_styled$Styled$px(5)),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Main$styledDelete = A2(
	_styled_components$elm_styled$Styled$styled,
	_elm_lang$html$Html$button,
	{
		ctor: '::',
		_0: A3(
			_styled_components$elm_styled$Styled$border,
			_styled_components$elm_styled$Styled$px(0),
			_styled_components$elm_styled$Styled$solid,
			_styled_components$elm_styled$Styled_Colors$white),
		_1: {
			ctor: '::',
			_0: _styled_components$elm_styled$Styled$backgroundColor(_styled_components$elm_styled$Styled_Colors$white),
			_1: {ctor: '[]'}
		}
	});
var _user$project$Main$styledLi = A2(
	_styled_components$elm_styled$Styled$styled,
	_elm_lang$html$Html$li,
	{
		ctor: '::',
		_0: _styled_components$elm_styled$Styled$width(
			_styled_components$elm_styled$Styled$px(200)),
		_1: {
			ctor: '::',
			_0: _styled_components$elm_styled$Styled$display(_styled_components$elm_styled$Styled$flex_),
			_1: {
				ctor: '::',
				_0: _styled_components$elm_styled$Styled$justifyContent(_styled_components$elm_styled$Styled$spaceBetween),
				_1: {
					ctor: '::',
					_0: _styled_components$elm_styled$Styled$alignItems(_styled_components$elm_styled$Styled$center),
					_1: {
						ctor: '::',
						_0: _styled_components$elm_styled$Styled$borderRadius(
							_styled_components$elm_styled$Styled$px(20)),
						_1: {
							ctor: '::',
							_0: A3(
								_styled_components$elm_styled$Styled$border,
								_styled_components$elm_styled$Styled$px(1),
								_styled_components$elm_styled$Styled$solid,
								_styled_components$elm_styled$Styled_Colors$lightGray),
							_1: {
								ctor: '::',
								_0: _styled_components$elm_styled$Styled$margin(
									_styled_components$elm_styled$Styled$px(2)),
								_1: {
									ctor: '::',
									_0: _styled_components$elm_styled$Styled$padding(
										_styled_components$elm_styled$Styled$px(4)),
									_1: {
										ctor: '::',
										_0: _styled_components$elm_styled$Styled$fontSize(
											_styled_components$elm_styled$Styled$em(1.5)),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}
				}
			}
		}
	});
var _user$project$Main$styledUl = A2(
	_styled_components$elm_styled$Styled$styled,
	_elm_lang$html$Html$ul,
	{
		ctor: '::',
		_0: _styled_components$elm_styled$Styled$listStyleType(_styled_components$elm_styled$Styled$none),
		_1: {
			ctor: '::',
			_0: _styled_components$elm_styled$Styled$padding(
				_styled_components$elm_styled$Styled$px(0)),
			_1: {
				ctor: '::',
				_0: _styled_components$elm_styled$Styled$margin(
					_styled_components$elm_styled$Styled$px(0)),
				_1: {ctor: '[]'}
			}
		}
	});
var _user$project$Main$styledInput = A2(
	_styled_components$elm_styled$Styled$styled,
	_elm_lang$html$Html$input,
	{
		ctor: '::',
		_0: _styled_components$elm_styled$Styled$padding(
			_styled_components$elm_styled$Styled$em(1)),
		_1: {
			ctor: '::',
			_0: A3(
				_styled_components$elm_styled$Styled$border,
				_styled_components$elm_styled$Styled$px(2),
				_styled_components$elm_styled$Styled$solid,
				_styled_components$elm_styled$Styled_Colors$pink),
			_1: {
				ctor: '::',
				_0: _styled_components$elm_styled$Styled$borderRadius(
					_styled_components$elm_styled$Styled$px(30)),
				_1: {
					ctor: '::',
					_0: _styled_components$elm_styled$Styled$fontSize(
						_styled_components$elm_styled$Styled$em(1)),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Main$title = A2(
	_styled_components$elm_styled$Styled$styled,
	_elm_lang$html$Html$h1,
	{
		ctor: '::',
		_0: _styled_components$elm_styled$Styled$fontSize(
			_styled_components$elm_styled$Styled$em(3.5)),
		_1: {
			ctor: '::',
			_0: _styled_components$elm_styled$Styled$textAlign(_styled_components$elm_styled$Styled$center),
			_1: {
				ctor: '::',
				_0: _styled_components$elm_styled$Styled$color(_styled_components$elm_styled$Styled_Colors$lightPink),
				_1: {
					ctor: '::',
					_0: _styled_components$elm_styled$Styled$fontFamily(_styled_components$elm_styled$Styled$monospace),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Main$innerContainer = A2(
	_styled_components$elm_styled$Styled$styled,
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _styled_components$elm_styled$Styled$display(_styled_components$elm_styled$Styled$flex_),
		_1: {
			ctor: '::',
			_0: _styled_components$elm_styled$Styled$alignItems(_styled_components$elm_styled$Styled$center),
			_1: {
				ctor: '::',
				_0: _styled_components$elm_styled$Styled$width(
					_styled_components$elm_styled$Styled$percent(50)),
				_1: {
					ctor: '::',
					_0: _styled_components$elm_styled$Styled$backgroundColor(_styled_components$elm_styled$Styled_Colors$white),
					_1: {
						ctor: '::',
						_0: _styled_components$elm_styled$Styled$flexDirection(_styled_components$elm_styled$Styled$column),
						_1: {
							ctor: '::',
							_0: _styled_components$elm_styled$Styled$padding(
								_styled_components$elm_styled$Styled$px(4)),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$Main$container = A2(
	_styled_components$elm_styled$Styled$styled,
	_elm_lang$html$Html$div,
	{
		ctor: '::',
		_0: _styled_components$elm_styled$Styled$height(
			_styled_components$elm_styled$Styled$percent(100)),
		_1: {
			ctor: '::',
			_0: _styled_components$elm_styled$Styled$display(_styled_components$elm_styled$Styled$flex_),
			_1: {
				ctor: '::',
				_0: _styled_components$elm_styled$Styled$justifyContent(_styled_components$elm_styled$Styled$center),
				_1: {
					ctor: '::',
					_0: _styled_components$elm_styled$Styled$alignItems(_styled_components$elm_styled$Styled$center),
					_1: {
						ctor: '::',
						_0: _styled_components$elm_styled$Styled$backgroundColor(_styled_components$elm_styled$Styled_Colors$lightGray),
						_1: {
							ctor: '::',
							_0: _styled_components$elm_styled$Styled$flexDirection(_styled_components$elm_styled$Styled$column),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		}
	});
var _user$project$Main$onKeyDown = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'keydown',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$keyCode));
};
var _user$project$Main$visualizeToValue = function (visualize) {
	var _p0 = visualize;
	switch (_p0.ctor) {
		case 'All':
			return _elm_lang$core$Json_Encode$string('All');
		case 'Completed':
			return _elm_lang$core$Json_Encode$string('Completed');
		default:
			return _elm_lang$core$Json_Encode$string('Active');
	}
};
var _user$project$Main$todoItemToValue = function (todoItem) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'title',
				_1: _elm_lang$core$Json_Encode$string(todoItem.title)
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'completed',
					_1: _elm_lang$core$Json_Encode$bool(todoItem.completed)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'id',
						_1: _elm_lang$core$Json_Encode$int(todoItem.id)
					},
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$modelToValue = function (model) {
	return _elm_lang$core$Json_Encode$object(
		{
			ctor: '::',
			_0: {
				ctor: '_Tuple2',
				_0: 'todoItems',
				_1: _elm_lang$core$Json_Encode$list(
					A2(_elm_lang$core$List$map, _user$project$Main$todoItemToValue, model.todoItems))
			},
			_1: {
				ctor: '::',
				_0: {
					ctor: '_Tuple2',
					_0: 'currentTodo',
					_1: _elm_lang$core$Json_Encode$string(model.currentTodo)
				},
				_1: {
					ctor: '::',
					_0: {
						ctor: '_Tuple2',
						_0: 'show',
						_1: _user$project$Main$visualizeToValue(model.show)
					},
					_1: {
						ctor: '::',
						_0: {
							ctor: '_Tuple2',
							_0: 'currentIndex',
							_1: _elm_lang$core$Json_Encode$int(model.currentIndex)
						},
						_1: {ctor: '[]'}
					}
				}
			}
		});
};
var _user$project$Main$save = _elm_lang$core$Native_Platform.outgoingPort(
	'save',
	function (v) {
		return v;
	});
var _user$project$Main$load = _elm_lang$core$Native_Platform.incomingPort('load', _elm_lang$core$Json_Decode$value);
var _user$project$Main$TodoItem = F3(
	function (a, b, c) {
		return {title: a, completed: b, id: c};
	});
var _user$project$Main$todoItemDecoder = A4(
	_elm_lang$core$Json_Decode$map3,
	_user$project$Main$TodoItem,
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'title',
			_1: {ctor: '[]'}
		},
		_elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'completed',
			_1: {ctor: '[]'}
		},
		_elm_lang$core$Json_Decode$bool),
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'id',
			_1: {ctor: '[]'}
		},
		_elm_lang$core$Json_Decode$int));
var _user$project$Main$Model = F4(
	function (a, b, c, d) {
		return {todoItems: a, currentTodo: b, show: c, currentIndex: d};
	});
var _user$project$Main$Active = {ctor: 'Active'};
var _user$project$Main$Completed = {ctor: 'Completed'};
var _user$project$Main$All = {ctor: 'All'};
var _user$project$Main$visualizeDecoder = function (tag) {
	var _p1 = tag;
	switch (_p1) {
		case 'All':
			return _elm_lang$core$Json_Decode$succeed(_user$project$Main$All);
		case 'Completed':
			return _elm_lang$core$Json_Decode$succeed(_user$project$Main$Completed);
		case 'Active':
			return _elm_lang$core$Json_Decode$succeed(_user$project$Main$Active);
		default:
			return _elm_lang$core$Json_Decode$fail(
				A2(_elm_lang$core$Basics_ops['++'], tag, ' is not recognized as visualize value'));
	}
};
var _user$project$Main$modelDecoder = A5(
	_elm_lang$core$Json_Decode$map4,
	_user$project$Main$Model,
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'todoItems',
			_1: {ctor: '[]'}
		},
		_elm_lang$core$Json_Decode$list(_user$project$Main$todoItemDecoder)),
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'currentTodo',
			_1: {ctor: '[]'}
		},
		_elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode$andThen,
		_user$project$Main$visualizeDecoder,
		A2(
			_elm_lang$core$Json_Decode$at,
			{
				ctor: '::',
				_0: 'show',
				_1: {ctor: '[]'}
			},
			_elm_lang$core$Json_Decode$string)),
	A2(
		_elm_lang$core$Json_Decode$at,
		{
			ctor: '::',
			_0: 'currentIndex',
			_1: {ctor: '[]'}
		},
		_elm_lang$core$Json_Decode$int));
var _user$project$Main$initialModel = {
	todoItems: {ctor: '[]'},
	currentTodo: '',
	show: _user$project$Main$All,
	currentIndex: 0
};
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$initialModel, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'SwitchShowMode':
				var _p3 = _p2._0;
				switch (_p3.ctor) {
					case 'All':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{show: _user$project$Main$All}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					case 'Completed':
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{show: _user$project$Main$Completed}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
					default:
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								model,
								{show: _user$project$Main$Active}),
							_1: _elm_lang$core$Platform_Cmd$none
						};
				}
			case 'UpdateCurrentTodo':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{currentTodo: _p2._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'RemoveTodo':
				var removeItemWithId = F2(
					function (id, todoItem) {
						return _elm_lang$core$Native_Utils.eq(id, todoItem.id) ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(todoItem);
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							todoItems: A2(
								_elm_lang$core$List$filterMap,
								removeItemWithId(_p2._0),
								model.todoItems)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'RemoveAll':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							todoItems: {ctor: '[]'}
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'ToggleCompleted':
				var toggleCompleted = F2(
					function (id, todoItem) {
						return _elm_lang$core$Native_Utils.eq(id, todoItem.id) ? _elm_lang$core$Native_Utils.update(
							todoItem,
							{completed: !todoItem.completed}) : todoItem;
					});
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							todoItems: A2(
								_elm_lang$core$List$map,
								toggleCompleted(_p2._0),
								model.todoItems)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'KeyDown':
				return (_elm_lang$core$Native_Utils.eq(_p2._0, 13) && (!_elm_lang$core$String$isEmpty(model.currentTodo))) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							currentTodo: '',
							todoItems: {
								ctor: '::',
								_0: A3(_user$project$Main$TodoItem, model.currentTodo, false, model.currentIndex),
								_1: model.todoItems
							},
							currentIndex: model.currentIndex + 1
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				} : {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
			case 'Save':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _user$project$Main$save(
						_user$project$Main$modelToValue(model))
				};
			case 'Load':
				return {ctor: '_Tuple2', _0: _p2._0, _1: _elm_lang$core$Platform_Cmd$none};
			default:
				return {ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none};
		}
	});
var _user$project$Main$NoOp = {ctor: 'NoOp'};
var _user$project$Main$Save = {ctor: 'Save'};
var _user$project$Main$Load = function (a) {
	return {ctor: 'Load', _0: a};
};
var _user$project$Main$decodeModel = function (value) {
	var result = A2(_elm_lang$core$Json_Decode$decodeValue, _user$project$Main$modelDecoder, value);
	var _p4 = result;
	if (_p4.ctor === 'Ok') {
		return _user$project$Main$Load(_p4._0);
	} else {
		return _user$project$Main$NoOp;
	}
};
var _user$project$Main$subscriptions = function (model) {
	return _user$project$Main$load(_user$project$Main$decodeModel);
};
var _user$project$Main$KeyDown = function (a) {
	return {ctor: 'KeyDown', _0: a};
};
var _user$project$Main$ToggleCompleted = function (a) {
	return {ctor: 'ToggleCompleted', _0: a};
};
var _user$project$Main$RemoveAll = {ctor: 'RemoveAll'};
var _user$project$Main$RemoveTodo = function (a) {
	return {ctor: 'RemoveTodo', _0: a};
};
var _user$project$Main$itemView = function (todoItem) {
	return A2(
		_user$project$Main$styledLi,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$input,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$checked(todoItem.completed),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$Main$ToggleCompleted(todoItem.id)),
							_1: {ctor: '[]'}
						}
					}
				},
				{ctor: '[]'}),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html$text(todoItem.title),
				_1: {
					ctor: '::',
					_0: A2(
						_user$project$Main$styledDelete,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(
								_user$project$Main$RemoveTodo(todoItem.id)),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('X'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$Main$listView = function (model) {
	var _p5 = model.show;
	switch (_p5.ctor) {
		case 'All':
			return A2(_elm_lang$core$List$map, _user$project$Main$itemView, model.todoItems);
		case 'Active':
			return A2(
				_elm_lang$core$List$map,
				_user$project$Main$itemView,
				A2(
					_elm_lang$core$List$filter,
					function (todoItem) {
						return !todoItem.completed;
					},
					model.todoItems));
		default:
			return A2(
				_elm_lang$core$List$map,
				_user$project$Main$itemView,
				A2(
					_elm_lang$core$List$filter,
					function (todoItem) {
						return todoItem.completed;
					},
					model.todoItems));
	}
};
var _user$project$Main$UpdateCurrentTodo = function (a) {
	return {ctor: 'UpdateCurrentTodo', _0: a};
};
var _user$project$Main$SwitchShowMode = function (a) {
	return {ctor: 'SwitchShowMode', _0: a};
};
var _user$project$Main$controlView = function (model) {
	return (!_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(model.todoItems),
		0)) ? A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'items: ',
					_elm_lang$core$Basics$toString(
						_elm_lang$core$List$length(model.todoItems)))),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$br,
					{ctor: '[]'},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html$text('Show: '),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$core$Native_Utils.eq(model.show, _user$project$Main$Active) ? _user$project$Main$styledActiveControlButtons : _user$project$Main$styledControlButtons,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_user$project$Main$SwitchShowMode(_user$project$Main$Active)),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('Actives'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$core$Native_Utils.eq(model.show, _user$project$Main$Completed) ? _user$project$Main$styledActiveControlButtons : _user$project$Main$styledControlButtons,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onClick(
										_user$project$Main$SwitchShowMode(_user$project$Main$Completed)),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Completed'),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$core$Native_Utils.eq(model.show, _user$project$Main$All) ? _user$project$Main$styledActiveControlButtons : _user$project$Main$styledControlButtons,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(
											_user$project$Main$SwitchShowMode(_user$project$Main$All)),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('All'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$br,
											{ctor: '[]'},
											{ctor: '[]'}),
										_1: {
											ctor: '::',
											_0: A2(
												_user$project$Main$styledControlButtons,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$RemoveAll),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text('Remove All'),
													_1: {ctor: '[]'}
												}),
											_1: {
												ctor: '::',
												_0: A2(
													_user$project$Main$styledSaveButton,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Save),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: _elm_lang$html$Html$text('Save'),
														_1: {ctor: '[]'}
													}),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						}
					}
				}
			}
		}) : _elm_lang$html$Html$text('');
};
var _user$project$Main$view = function (model) {
	return A2(
		_user$project$Main$container,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_user$project$Main$title,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('todos'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_user$project$Main$innerContainer,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: A2(
									_user$project$Main$styledInput,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$placeholder('Todo item'),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$value(model.currentTodo),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$UpdateCurrentTodo),
												_1: {
													ctor: '::',
													_0: _user$project$Main$onKeyDown(_user$project$Main$KeyDown),
													_1: {ctor: '[]'}
												}
											}
										}
									},
									{ctor: '[]'}),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$br,
								{ctor: '[]'},
								{ctor: '[]'}),
							_1: {
								ctor: '::',
								_0: A2(
									_user$project$Main$styledUl,
									{ctor: '[]'},
									_user$project$Main$listView(model)),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$br,
										{ctor: '[]'},
										{ctor: '[]'}),
									_1: {
										ctor: '::',
										_0: _user$project$Main$controlView(model),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					}),
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subscriptions})();
